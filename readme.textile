h1. Jubula GUI tests for Elexis 3.1

Here Niklaus tries to make a new, better environment for running the Jubula GUI-tests.

The following improvements are planned. Order may be varied depending whether we will encounter unforeseen problems.

* Move to current Jubula-Version 8.2
* Simplify vastly the ruby scripts. Ideas are:
** -Move all config-variables in one (or more) YAML-files- "see":defaults.yaml. They may be overriden be putting your changes into config.yaml
** -Add simple script to download Elexis-Opensource from Jenkin-CI- "see":scripts/install_open_source_elexis.rb
** Add simple script to use Medelexis-Zip/license.xml from a given local directory
** -Add the jubula*jar for running the tests to this project for easy installation- "see":scripts/run_jubula_test.rb
*** -This file must patch the config.ini or the AUTagent will not start!-
* Run Jubula-Tests inside a docker environment (to work around libwebkit-gtk problem under Linux)
* -Test steps above with a very simple Jubula GUI test which creates only a screenshot of the main window. Must check whether running in a docker will create meaningfull (not mostly black) screenshots.- "see":definitions/Screenshot.yaml
* Rework visiting all Views and Perspectives to use the Jubula-provided tools
* Migrate to use Java-based UI test automation. This should ease the pain from other developpers to get a head start.
* Add a custom articlestamm.xml with a good selection of drugs to make a good demo
* Find a way to properly identify each tab of a combo, e.g. the various articlestamm
* Rework some Elexis-GUI elements, e.g.
** DatePickers should allow entering a date via the keyboard. This is needed when a consultation for a previous date has to be entered
* Complete basic tests til we can prove that Elexis creates correct bills


h2. concepts

Config-Variables are accessed via the Hash Config and stored as follows:

* "defaults.yaml":defaults.yaml default definition which common for all tests
* "config.yaml":config.yaml (not in git), let you override the default
* for test, e.g: "definitions/Screenshot.yaml":definitions/Screenshot.yaml let you control how the tests are run. They are read when a test is executed. At the moment it is not possible to  include another yaml file. The usually contain
** :autrun_params, e.g. @"--kblayout de_CD --autid elexis -rcp"@
** :testexec_params: e.g. @"-autid elexis -version 1.0 -language en_US -project Screenshot -testsuite ScreenSuite"@
** :aut_vmargs: e.g.
bc. "-DdbOpts=h2 -Delexis-run-mode=RunFromScratch
-Dch.elexis.username=007 -Dch.elexis.password=topsecret
-Declipse.p2.unsignedPolicy=allow -Dorg.eclipse.swt.browser.DefaultType=mozilla"

We will probably soon add a possibility to add a specific command before a test execution, eg. to download a file. 


h2. notes

h3. Why do we not install Jubula on the docker

The following arguments were in favor:
* Once the docker images is created, running the tests would be easy

The following arguments were against:
* Jubula 8.2 is quite large (almost 900 MB) after the installation. We are able to zip the needed autagent to about 55MB.
* We want to install Jubula only once on the target host

h3. testing inside docker

If you have ruby installed, run once @gem install bundler && bundle install --without debugger && rake docker_build@. Then call @rake docker_build_run@.

To run a testsuite e.g. Screenshot just call @rake run_inside_docker Screenshot@. Insure that you got a nice screenshot under results/images/ before proceeding to more complex tests.
